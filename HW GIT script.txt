GIT Homework 1

Для выполнения задания у вас должен быть установлен для Windows - GitBash.
Создан аккаунт в GitHub

Все шаги сценария выполняйте в терминале GitBush, Terminal, в папке под гитом.

Как отправить ДЗ на проверку.
 1. Создайте текстоовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash

Файл со сценарием и ссылку на свой гит хаб отправляйте менторам на проверку.

JSON
 4. Создать внешний репозиторий c названием JSON. - войти на сайт https://github.com/, нажать на кнопку New (для создания нового репозитория) - заполнить имя репозитория (Repository name) - выбрать радиобаттон Public - нажать на кнопку Create repository.
 5. Клонировать репозиторий JSON на локальный компьютер. - в gitbash ввести команду git clone https://github.com/tatyana-romanova/JSON.git (скопировать ссылку Code - Clone HTTP)
 6. Внутри локального JSON создать файл “new.json”. - cd JSON; vim new.json (для выхода :wq)
 7. Добавить файл под гит. - git add new.json
 8. Закоммитить файл. - git commit -m "create new.json"
 9. Отправить файл на внешний GitHub репозиторий. - git push
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON. vim new.json (для выхода :wq)
 11. Отправить изменения на внешний репозиторий. - git add new.json; git commit -m "create new.json"; git push
 12. Создать файл preferences.json - vim preferences.json 
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON. - для выхода из vim :wq
 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON - vim sklls.json (для выхода :wq)
 15. Отправить сразу 2 файла на внешний репозиторий. - git add preferences.json sklls.json
						       git commit -m "create preferences.json sklls.json"
						       git push
 16. На веб интерфейсе создать файл bug_report.json. - Add file - Create new file -  ввести имя файла 
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе. - Нажать на Commit new file
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON. - открыть файл - нажать Edit this file 
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе. - Нажать Commit changes 
 20. Синхронизировать внешний и локальный репозиторий JSON - git pull - git push


XML
 21. Создать внешний репозиторий c названием XML. - нажать на кнопку New (для создания нового репозитория) - заполнить имя репозитория (Repository name) - выбрать радиобаттон Public - нажать на кнопку Create repository.
 22. Клонировать репозиторий XML на локальный компьютер. - git clone https://github.com/tatyana-romanova/XML.git
 23. Внутри локального XML создать файл “new.xml”.  - vim new.xml (для выхода :wq)
 24. Добавить файл под гит. - git add new.xml
 25. Закоммитить файл. - git commit -m "create new.xml"
 26. Отправить файл на внешний GitHub репозиторий. - git push
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.  - vim new.xml (для выхода :wq)
 28. Отправить изменения на внешний репозиторий. - git add new.hml; git commit -m "create new.hml"; git push
 29. Создать файл preferences.xml - vim preferences.xml 
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML. - для выхода из vim  :wq 
 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML  -  vim sklls.xml (для выхода :wq)
 32. Сделать коммит в одну строку. - git add preferences.xml sklls.xml | git commit -m "add 2 files"
 33. Отправить сразу 2 файла на внешний репозиторий. - git push
 34. На веб интерфейсе создать файл bug_report.xml. - Add file - Create new file -  ввести имя файла
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе. - Нажать на Commit new file
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе. - открыть файл - нажать Edit this file 
 38. Синхронизировать внешний и локальный репозиторий XML - git pull - git push



TXT
 1. Создать внешний репозиторий c названием TXT. - нажать на кнопку New (для создания нового репозитория) - заполнить имя репозитория (Repository name) - выбрать радиобаттон Public - нажать на кнопку Create repository.
 2. Клонировать репозиторий TXT на локальный компьютер. - git clone https://github.com/tatyana-romanova/TXT.git
 3. Внутри локального TXT создать файл “new.txt”. - vim new.txt (для выхода :wq)
 4. Добавить файл под гит. - git add new.txt
 5. Закоммитить файл. - git commit -m "create new.txt"
 6. Отправить файл на внешний GitHub репозиторий. - git push
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT. - vim new.txt (для выхода :wq)
 8. Отправить изменения на внешний репозиторий. - git add new.txt: git commit -m "create new.txt"; git push
 9. Создать файл preferences.txt  - vim preferences.txt  
 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.   - для выхода из vim   :wq
 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT  - vim sklls.txt (для выхода :wq)
 12. Сделать коммит в одну строку.  - git add preferences.txt sklls.txt | git commit -m "add 2 files"
 13. Отправить сразу 2 файла на внешний репозиторий.  - git push
 14. На веб интерфейсе создать файл bug_report.txt. - - Add file - Create new file -  ввести имя файла
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.  - Нажать на Commit new file
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.  - открыть файл - нажать Edit this file 
 18. Синхронизировать внешний и локальный репозиторий TXT  - git pull - git push